// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  ADMIN
  STUDENT
}

model user {
  id             String    @id @default(cuid())
  firstName      String?   @map("first_name")
  lastName       String?   @map("last_name")
  user           String    @unique @db.VarChar(50)
  password       String
  role           Role
  genre          String?   @db.VarChar(1)
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  identification String?   @unique @db.VarChar(15)
  birthDate      DateTime  @map("birth_date") @db.Date
  teacher        Teacher?
  student        Student?

  @@map("users")
}

model Teacher {
  id        String    @id @default(cuid())
  user      user      @relation(fields: [userId], references: [id])
  userId    String    @unique @map("user_id")
  isPending Boolean   @default(true) @map("is_pending")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  comprensionLevelHistory ComprensionLevelHistory[]
  courses                 Course[]

  @@map("teachers")
}

model Student {
  id     String @id @default(cuid())
  user   user   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
  city      String    @db.VarChar(150)
  interests String?   @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  haveDyslexia Boolean @default(false) @map("have_dyslexia")

  comprensionLevelHistory ComprensionLevelHistory[]
  coursesStudent          CourseStudent[]

  @@map("students")
}

model ComprensionLevelHistory {
  id           String    @id @default(cuid())
  student      Student   @relation(fields: [studentId], references: [id])
  studentId    String    @map("student_id")
  level        Int       @db.SmallInt
  observations String?   @db.Text
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  createdBy    Teacher?  @relation(fields: [createdById], references: [id])
  createdById  String?   @map("created_by_id")

  @@map("comprension_level_history")
}

model Course {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(150)
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String    @map("teacher_id")
  description String?   @db.Text
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  courseStudents CourseStudent[]
  levels         Level[]

  @@map("courses")
}

model CourseStudent {
  id           String    @id @default(cuid())
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String    @map("course_id")
  student      Student   @relation(fields: [studentId], references: [id])
  studentId    String    @map("student_id")
  grade        Int
  customPrompt String?   @map("custom_prompt")
  problems     String?   @db.Text
  status       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  detailReadings DetailReading[]

  @@map("courses_students")
}

model Level {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(150)
  goals       String    @db.Text
  description String?   @db.Text
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  course      Course    @relation(fields: [courseId], references: [id])
  courseId    String    @map("course_id")

  readings Reading[]

  @@map("levels")
}

model Reading {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(150)
  goals     String    @db.Text
  length    String?   @db.VarChar(50)
  status    Boolean   @default(true)
  level     Level     @relation(fields: [levelId], references: [id])
  levelId   String    @map("level_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  autogenerate Boolean  @default(false)
  customPrompt String?   @map("custom_prompt")

  detailReadings DetailReading[]

  @@map("readings")
}

model DetailReading {
  id              String        @id @default(cuid())
  reading         Reading       @relation(fields: [readingId], references: [id])
  readingId       String        @map("lecture_id")
  student         CourseStudent @relation(fields: [courseStudentId], references: [id])
  courseStudentId String        @map("course_student_id")
  frontPage       Multimedia    @relation(fields: [frontPageId], references: [id])
  frontPageId     String        @map("front_page_id")
  status          Boolean       @default(true)

  activities      Activity[]
  contentsLecture ContentLecture[]

  @@map("detail_readings")
}

enum TypeContent {
  TEXT
  IMAGE
}

model ContentLecture {
  id              String         @id @default(cuid())
  detailReading   DetailReading  @relation(fields: [detailReadingId], references: [id])
  detailReadingId String         @map("detail_lecture_id")
  status          Boolean        @default(true)
  type            TypeContent
  content         String         @db.Text
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime?      @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("contents_lecture")
}

enum TypeActivity {
  YES_NO
  QUIZ
  OPEN_ANSWERS
  OPEN_TEXT
  CROSSWORD
  SORT_IMAGES
}

// model TypeActivity {
//   id          String    @id @default(cuid())
//   name        String    @db.VarChar(50)
//   description String?   @db.Text
//   status      Boolean   @default(true)
//   createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
//   updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

//   activities Activity[]

//   @@map("types_activities")
// }

model Activity {
  id              String        @id @default(cuid())
  typeActivity    TypeActivity  @map("type_activity")
  // typeActivityId  String        @map("type_activity_id")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime?     @updatedAt @map("updated_at") @db.Timestamptz()
  detailReading   DetailReading @relation(fields: [detailReadingId], references: [id])
  detailReadingId String        @map("detail_lecture_id")
  status          Boolean       @default(true)

  questionActivities QuestionActivity[]
  imageActivities    ImageActivity[]
  scores             Score[]

  @@map("activities")
}

model QuestionActivity {
  id         String   @id @default(cuid())
  question   String   @db.VarChar(255)
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  answerActivity AnswerActivity[]

  @@map("question_activities")
}

model AnswerActivity {
  id         String           @id @default(cuid())
  answer     String           @db.VarChar(255)
  isCorrect  Boolean?         @default(false) @map("is_correct")
  question   QuestionActivity @relation(fields: [questionId], references: [id])
  questionId String           @map("question_id")

  @@map("answer_activities")
}

model ImageActivity {
  id           String     @id @default(cuid())
  multimedia   Multimedia @relation(fields: [multimediaId], references: [id])
  multimediaId String     @map("multimedia_id")
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   String     @map("activity_id")
  order        Int        @db.SmallInt

  @@map("image_activities")
}

enum TypeMultimedia {
  IMAGE
  VIDEO
  AUDIO
}

model Multimedia {
  id          String         @id @default(cuid())
  url         String         @db.Text
  description String?        @db.Text
  type        TypeMultimedia
  status      Boolean        @default(true)
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime?      @updatedAt @map("updated_at") @db.Timestamptz()

  imageActivities ImageActivity[]
  frontPages      DetailReading[]

  @@map("multimedia")
}

model Score {
  id             String    @id @default(cuid())
  score          Decimal?  @db.Decimal(3, 2)
  recommendation String?   @db.Text
  reponses       Json[]    @default([]) @db.Json
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamptz()

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String

  @@map("scores")
}
